name: SSL Certificate Renewal

on:
  workflow_call:
    inputs:
      csr_common_name:
        description: "CSR common name ( example: 'test.io-poc.pagopa.it' )"
        type: string
        required: true
      azure_dns_zone_resource_group:
        description: "Azure Resource Group that contains the target DNS zone ( example: 'io-p-xxxx' )"
        type: string
        required: true
      azure_dns_zone:
        description: "DNS zone for which we are renewing the certificate ( example: 'io.pagopa.it' )"
        type: string
        required: true
      key_vault_name:
        description: "Name of the Key Vault used to store the certificate ( example: 'io-p-itn-tlscert-kv-01' )"
        type: string
        required: true
      force_renew_cert:
        description: "Force the certificate renewal"
        type: boolean
        required: true
        default: false
      alternate_chain_cn:
        description: "Alternate CN for the certificate chain ( example: 'CN=DST Root CA X3' )"
        type: string
        required: false
      environment:
        description: "Environment used to run the Github workflow ( example: 'dev', 'prod' )"
        type: string
        required: true
      use_selfhosted_agent:
        description: "Use a self hosted agent to run the workflow."
        type: boolean
        required: false
        default: false

env:
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true

jobs:

  auto_approve_staging_deploy:

    name: Auto Approve Certificate Renewal
    runs-on: ubuntu-latest
    needs: [validate]
    # If auto approve fails, the approval can be retried manually
    continue-on-error: true

    steps:
      - name: Auto approve certificate renewal
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_DEPLOYMENT_APPROVAL }}
          REQUIRED_ENVIRONMENT: ${{ inputs.environment }}-cd
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "::error::GH_TOKEN_DEPLOYMENT_APPROVAL secret is not set."
            exit 1
          fi

          deployments=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments)

          environment=$(echo "$deployments" | jq -r '.[].environment.name')

          if [ "$environment" != "$REQUIRED_ENVIRONMENT" ]; then
            echo "::error::Environment $REQUIRED_ENVIRONMENT not found."
            echo "::warning::Check if the deployment was already approved by one of the reviewers."
            exit 1
          fi

          current_user_can_approve=$(echo "$deployments" | jq -r '.[].current_user_can_approve')

          if [ "$current_user_can_approve" != true ]; then
            GITHUB_USER=$(gh api user | jq -r '.login')
            echo "::error::$GITHUB_USER is not a reviewer"
            echo "::warning::Auto Approval not available, the user is not a reviewer of the environment $REQUIRED_ENVIRONMENT."
            exit 1
          fi

          env_id=$(echo "$deployments" | jq -r '.[].environment.id')

          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/pending_deployments \
            -F "environment_ids[]=$env_id" \
            -f "state=approved" \
            -f "comment=Approved automatically by the workflow."

  renewalDecision:

    name: Certificate renewal decision
    runs-on: ${{ inputs.use_selfhosted_agent && 'self-hosted' || 'ubuntu-24.04' }}
    environment: ${{ inputs.environment }}-cd
    permissions:
       id-token: write
    defaults:
      run:
        shell: bash
    env:
      certificate_expiration_time: "2592000" # Certificate expiration time in seconds, default to 30 days
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    outputs:
      is_forced_renew: ${{ steps.evaluate_force_renew.outputs.evaluate_force_renew }}
      require_new_certificate: ${{ steps.fetch_and_check.outputs.require_new_certificate }}

    steps:

      - name: Evaluate force renew
        id: evaluate_force_renew # id is mandatory to enable variable output to another job
        env: 
          force_renew_cert: ${{ inputs.force_renew_cert }}
        run: |
            if [ "$force_renew_cert" == "true" ]
              then
                echo "🔄 Parameter force_renew_cert is set to True , skipping the remaining steps and launching the next job"
                echo "evaluate_force_renew=true" >> $GITHUB_OUTPUT
            fi

      - name: Azure Login
        uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
        if: inputs.force_renew_cert == false
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Fetch and check certificate
        id: fetch_and_check
        if: inputs.force_renew_cert == false
        env:
          string_manipulation_cert_name: ${{ inputs.csr_common_name }}
          key_vault_name: ${{ inputs.key_vault_name }}
        run: |
            key_vault_cert_name=$(echo "${string_manipulation_cert_name//./-}")

            if ! az keyvault certificate download --vault-name "$key_vault_name" -n "$key_vault_cert_name" -f certificate.pem >/dev/null
              then
                echo "❌ The certificate was not found in the selected Key Vault, proceeding to request it from LE"
                echo "require_new_certificate=true" >> $GITHUB_OUTPUT
            else
              if ! openssl x509 -inform pem -checkend "$certificate_expiration_time" -noout -in certificate.pem
                then
                  # certificate is expiring or is already expired
                  echo "do_cleanup=true" >> $GITHUB_ENV
                  echo "require_new_certificate=true" >> $GITHUB_OUTPUT
                else
                  echo "✅ The certificate is not expiring, cleaning up and exiting"
                  echo "do_cleanup=true" >> $GITHUB_ENV
              fi
            fi

      - name: Cleanup
        if: env.do_cleanup == 'true'
        run: rm -f certificate.pem

  obtainCertificateFromLE:

    name: Obtain the new certificate from Lets Encrypt
    runs-on: ${{ inputs.use_selfhosted_agent && 'self-hosted' || 'ubuntu-24.04' }}
    environment: ${{ inputs.environment }}-cd
    permissions:
       id-token: write
    needs: renewalDecision
    if: needs.renewalDecision.outputs.require_new_certificate == 'true' || needs.renewalDecision.outputs.is_forced_renew == 'true'
    defaults:
      run:
        shell: bash
    env:
      python_version: "3.12.8" # Python version used to run all the scripts
      le_azure_identity_type: MANAGED_IDENTITY # Type of azure identity used by the Python ACME script
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:

      - name: Azure Login
        uses: azure/login@6b2456866fc08b011acb422a92a4aa20e2c4de32 # v2.1.0
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Fetch LE authentication keys from Key Vault
        env:
          key_vault_name: ${{ inputs.key_vault_name }}
        run: |
            az keyvault secret download --vault-name "$key_vault_name" --name le-private-key-json --file private_key.json
            az keyvault secret download --vault-name "$key_vault_name" --name le-regr-json --file regr.json

      - name: Run LE renew SSL Certificate python action
        uses: pagopa/io-infra/.github/actions/le-renew-ssl-certificate-python@IOPLT-1309-ssl-cert-renewal-template # to be changed to dx
        with:
          csr_common_name: ${{ inputs.csr_common_name }}
          python_version: ${{ env.python_version }}
          arm_subscription_id: ${{ env.ARM_SUBSCRIPTION_ID }}
          azure_dns_zone_resource_group: ${{ inputs.azure_dns_zone_resource_group }}
          azure_dns_zone: ${{ inputs.azure_dns_zone }}
          le_azure_identity_type: ${{ env.le_azure_identity_type }}

      - name: Select the certificate chain
        env:
          alternate_chain_cn: ${{ inputs.alternate_chain_cn }}
        run: |
            # if we are not searching for a specific chain, exit early
            if [[ -z "$alternate_chain_cn" ]]; then
              echo "❌ alternate_chain_cn input not containing any value, selecting the default certificate chain"
              mv certificate_chain.pem.0 certificate_chain.pem
              exit 0
            fi
            echo "🔍 Looking for $alternate_chain_cn root issuer..."
              for file in certificate_chain.pem.*; do
                # assuming ordered PEMs in file
                root_issuer=$(while openssl x509 -inform pem -noout -issuer 2>/dev/null; do :; done < "$file" | tail -n 1)
                echo "🔍 The root issuer for $file is $root_issuer"
                # check if the grep result is positive or not
                if echo "$root_issuer" | sed 's/ *= */=/g' | grep "$alternate_chain_cn" 1>/dev/null
                  then
                    echo "✅ Found $alternate_chain_cn in $file!"
                    export chain_found="true"
                    # print some debug info
                    while openssl x509 -inform pem -noout -issuer 2>/dev/null; do :; done < "$file"
                    # select this file
                    mv "$file" certificate_chain.pem
                    break
                  else
                    echo "⏭️ Skipping $file"
                fi
              done
              if [ -z "$chain_found" ]; then
                # by default the certificate_chain.pem.0 must be the selected certificate in case of no CN matches
                echo "❌ alternate_chain_cn not found in any file, selecting the default certificate chain"
                mv certificate_chain.pem.0 certificate_chain.pem
              fi

      - name: Save the certificate in Key Vault
        env:
          string_manipulation_cert_name: ${{ inputs.csr_common_name }}
          key_vault_name: ${{ inputs.key_vault_name }}
          force_renew_cert: ${{ inputs.force_renew_cert }}
        run: |
            key_vault_cert_name=$(echo "${string_manipulation_cert_name//./-}")
            echo "🚀 Creating pfx"
            openssl pkcs12 -inkey csr.key -in certificate_chain.pem -export -passout pass: -nodes -out certificate_chain.pfx
            echo "💾 Saving pfx in $key_vault_name with name $key_vault_cert_name"
            az keyvault certificate import --vault-name "$key_vault_name" -n "$key_vault_cert_name" --disabled false -f certificate_chain.pfx --password "" --tags Force="$force_renew_cert" >/dev/null

      - name: Cleanup every file generated in the workspace
        run: |
            rm -f private_key.json
            rm -f regr.json
            rm -f csr.der
            rm -f csr.key
            rm -f certificate_chain.pem.*
            rm -f certificate_chain.pem
            rm -f certificate_chain.pfx
