name: APIM Migration

on:
  workflow_dispatch:
    inputs:
      backup_name:
        description: 'Name of the backup to restore'
        required: false
        type: string
      skip_apim_backup:
        description: 'True to skip APIM backup'
        required: false
        type: boolean
        default: false
      skip_app_restart:
        description: 'True to skip steps about AppServices'
        required: false
        type: boolean
        default: false
      skip_apim_mock_policy:
        description: 'True to skip steps about APIM mock policy'
        required: false
        type: boolean
        default: false

  schedule:
    - cron: '30 4 5 3 *' # Runs at 05:30 GMT+1 (04:30 UTC) on day-of-month 5 in March

env:
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  STORAGE_ACCOUNT_RG: "io-p-rg-internal"
  STORAGE_ACCOUNT_NAME: "iopapimbackupst01"
  STORAGE_ACCOUNT_CONTAINER_NAME: "apim-backups"

jobs:
  svc_add_apim_mock_policy:
    name: 'Add APIM mock policy to SVC APIs'
    runs-on: ubuntu-latest
    environment: apim-migration-start
    if: ${{ inputs.skip_apim_mock_policy == false }}
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Add APIM mock Policy
        run: |
          body=$(cat <<EOF
          {
            "properties": {
              "value": "<policies>
                <inbound>
                  <mock-response status-code=\"502\" content-type=\"application/json\"/>
                </inbound>
                <backend></backend>
                <outbound></outbound>
                <on-error></on-error>
              </policies>",
              "format": "xml"
            }
          }
          EOF
          )

          subscriptionId="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          resourceGroup="io-p-rg-internal"
          serviceName="io-p-apim-v2-api"
          apiId="io-services-cms-api"
          apiVersion="2022-08-01"

          az rest \
            --method put \
            --url "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ApiManagement/service/$serviceName/apis/$apiId/policies/policy?api-version=$apiVersion" \
            --body "$body"

  svc_stop_appservices:
    name: 'Stop SVC Apps'
    runs-on: ubuntu-latest
    environment: apim-migration-start
    if: ${{ always() && inputs.skip_app_restart == false && (needs.svc_add_apim_mock_policy.result == 'success' || needs.svc_add_apim_mock_policy.result == 'skipped') }}
    needs: [svc_add_apim_mock_policy]
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Stop SVC Backoffice
        run: |
          az webapp stop \
            --name "io-p-itn-svc-bo-app-01" \
            --resource-group "io-p-itn-svc-rg-01"

      - name: Stop SVC Backoffice - staging
        run: |
          az webapp stop \
            --name "io-p-itn-svc-bo-app-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --slot "staging"

      - name: Stop SVC DevPortal
        run: |
          az webapp stop \
            --name "io-p-app-devportal-be" \
            --resource-group "io-p-selfcare-be-rg"

      - name: Stop SVC DevPortal - staging
        run: |
          az webapp stop \
            --name "io-p-app-devportal-be" \
            --resource-group "io-p-selfcare-be-rg" \
            --slot "staging"

      - name: Stop SVC CMS Functions
        run: |
          az functionapp config appsettings set \
            --name "io-p-itn-svc-cms-func-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --settings AzureWebJobs.CreateService.Disabled=true AzureWebJobs.RegenerateServiceKeys.Disabled=true

      - name: Stop SVC CMS Functions - staging
        run: |
          az functionapp config appsettings set \
            --name "io-p-itn-svc-cms-func-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --settings AzureWebJobs.CreateService.Disabled=true AzureWebJobs.RegenerateServiceKeys.Disabled=true \
            --slot "staging"

  weu_apim_backup:
    name: 'Backup APIM WEU'
    runs-on: self-hosted
    environment: apim-migration-start
    if: ${{ always() && (inputs.backup_name == '' && inputs.skip_apim_backup == false) && (needs.svc_stop_appservices.result == 'success' || needs.svc_stop_appservices.result == 'skipped') }}
    needs: [svc_stop_appservices]
    timeout-minutes: 90
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      backup-name: ${{ steps.backup_name.outputs.backup_name }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Get current timestamp
        id: backup_name
        run: |
          NOW="$(date +'%Y-%m-%dT%H:%M:%S')"
          echo "backup_name=backup_$NOW" >> $GITHUB_ENV

      - name: APIM Backup
        if: ${{ inputs}}
        run: |
          set -e

          key=$(az storage account keys list \
            --resource-group ${{ env.STORAGE_ACCOUNT_RG }} \
            --account-name ${{ env.STORAGE_ACCOUNT_NAME }} \
            --query [0].value -o tsv)

          echo "--- DEBUG ---"
          echo "$backup_name"

          az apim backup \
            --backup-name "$backup_name" \
            --container-name "${{ env.STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            --name "io-p-apim-v2-api" \
            --resource-group "io-p-rg-internal" \
            --storage-account-key "$key" \
            --storage-account-name "${{ env.STORAGE_ACCOUNT_NAME }}"

  weu_apim_restore:
    name: 'Restore APIM backup to APIM ITN'
    runs-on: self-hosted
    environment: apim-migration-start
    timeout-minutes: 90
    needs: weu_apim_backup
    if: ${{ always() && inputs.skip_apim_backup == false && (needs.weu_apim_backup.result == 'success' || needs.weu_apim_backup.result == 'skipped') }}
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APIM_BACKUP_NAME: ${{ inputs.backup_name != '' && inputs.backup_name || needs.weu_apim_backup.outputs.backup-name }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: APIM Restore
        run: |
          set -e

          key=$(az storage account keys list \
            -g ${{ env.STORAGE_ACCOUNT_RG }} \
            -n ${{ env.STORAGE_ACCOUNT_NAME }} \
            --query [0].value -o tsv)

          echo "--- DEBUG ---"
          echo "${{ env.APIM_BACKUP_NAME }}"

          az apim restore \
            --backup-name "${{ env.APIM_BACKUP_NAME }}" \
            --container-name "${{ env.STORAGE_ACCOUNT_CONTAINER_NAME }}" \
            --name "io-p-itn-apim-01" \
            --resource-group "io-p-itn-common-rg-01" \
            --storage-account-key "$key" \
            --storage-account-name "${{ env.STORAGE_ACCOUNT_NAME }}"

  svc_start_appservices:
    name: 'Start SVC Apps'
    runs-on: ubuntu-latest
    environment: apim-migration-end
    needs: [weu_apim_restore]
    if: ${{ always() && inputs.skip_app_restart == false && (needs.weu_apim_restore.result == 'success' || needs.weu_apim_restore.result == 'skipped') }}
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Start SVC Backoffice
        run: |
          az webapp start \
            --name "io-p-itn-svc-bo-app-01" \
            --resource-group "io-p-itn-svc-rg-01"

      - name: Start SVC Backoffice - staging
        run: |
          az webapp start \
            --name "io-p-itn-svc-bo-app-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --slot "staging"

      - name: Start SVC DevPortal
        run: |
          az webapp start \
            --name "io-p-app-devportal-be" \
            --resource-group "io-p-selfcare-be-rg"

      - name: Start SVC DevPortal - staging
        run: |
          az webapp start \
            --name "io-p-app-devportal-be" \
            --resource-group "io-p-selfcare-be-rg" \
            --slot "staging"

      - name: Start SVC CMS Functions
        run: |
          az functionapp config appsettings set \
            --name "io-p-itn-svc-cms-func-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --settings AzureWebJobs.CreateService.Disabled=false AzureWebJobs.RegenerateServiceKeys.Disabled=false

      - name: Start SVC CMS Functions - staging
        run: |
          az functionapp config appsettings set \
            --name "io-p-itn-svc-cms-func-01" \
            --resource-group "io-p-itn-svc-rg-01" \
            --settings AzureWebJobs.CreateService.Disabled=false AzureWebJobs.RegenerateServiceKeys.Disabled=false \
            --slot "staging"

      - name: Wait Apps to restart (1m)
        run: sleep 60s
        shell: bash

  svc_remove_apim_mock_policy:
    name: 'Remove APIM mock policy to SVC APIs'
    runs-on: ubuntu-latest
    environment: apim-migration-end
    needs: [svc_start_appservices]
    if: ${{ always() && inputs.skip_apim_mock_policy == false && (needs.svc_start_appservices.result == 'success' || needs.svc_start_appservices.result == 'skipped') }}
    permissions:
      id-token: write
      contents: read
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Remove mock Policy from ITN APIM
        run: |
          body=$(cat <<EOF
          {
            "properties": {
              "value": "<policies>
                <inbound>
                  <base />
                  <choose>
                    <when condition=\"@(context.User.Groups.Any(g => g.Name == \"ApiAuthenticationClientCertificate\") && !(context.Request.Headers.GetValueOrDefault(\"{{apigad-gad-client-certificate-verified-header}}\", \"false\") == \"true\"))\">
                      <return-response>
                        <set-status code=\"403\" reason=\"Invalid client certificate\" />
                      </return-response>
                    </when>
                  </choose>
                  <set-header name=\"x-user-id\" exists-action=\"override\">
                    <value>@(context.User.Id)</value>
                  </set-header>
                  <set-header name=\"x-user-groups\" exists-action=\"override\">
                    <value>@(String.Join(\",\", context.User.Groups.Select(g => g.Name)))</value>
                  </set-header>
                  <set-header name=\"x-subscription-id\" exists-action=\"override\">
                    <value>@(context.Subscription.Id)</value>
                  </set-header>
                  <set-header name=\"x-user-email\" exists-action=\"override\">
                    <value>@(context.User.Email)</value>
                  </set-header>
                  <choose>
                    <when condition=\"@(context.Subscription.Id.StartsWith(\"MANAGE-GROUP-\"))\">
                      <set-header name=\"x-user-groups-selc\" exists-action=\"override\">
                        <value>@(context.Subscription.Id.Substring(\"MANAGE-GROUP-\".Length))</value>
                      </set-header>
                    </when>
                    <otherwise>
                      <set-header name=\"x-user-groups-selc\" exists-action=\"delete\" />
                    </otherwise>
                  </choose>
                  <cors>
                    <allowed-origins>
                      <origin>*</origin>
                    </allowed-origins>
                    <allowed-methods>
                      <method>*</method>
                    </allowed-methods>
                    <allowed-headers>
                      <header>*</header>
                    </allowed-headers>
                    <expose-headers>
                      <header>*</header>
                    </expose-headers>
                  </cors>
                </inbound>
                <outbound>
                  <base />
                </outbound>
                <backend>
                  <base />
                </backend>
                <on-error>
                  <base />
                </on-error>
              </policies>",
              "format": "rawxml"
            }
          }
          EOF
          )

          subscriptionId="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          resourceGroup="io-p-itn-common-rg-01"
          serviceName="io-p-itn-apim-01"
          apiId="io-services-cms-api"
          apiVersion="2022-08-01"

          az rest \
            --method put \
            --url "https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ApiManagement/service/$serviceName/apis/$apiId/policies/policy?api-version=$apiVersion" \
            --body "$body"
