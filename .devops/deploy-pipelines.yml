# only manual
trigger: none
pr: none

parameters:
  - name: 'PROD'
    displayName: 'Run on PROD environment'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'CORE'
    displayName: 'Run on Core'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'SIGN'
    displayName: 'Run on Sign'
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 5

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v17
      endpoint: 'io-azure-devops-github-ro'

stages:
  # PROD
  - stage: plan_PROD
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.PROD}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: PROD-IO-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: 'src/core'
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              SUBSCRIPTION: PROD-IO-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: 'src/sign'

  - stage: apply_PROD_CORE
    dependsOn: [plan_PROD]
    condition: and(eq(${{parameters.CORE}}, true), eq(${{parameters.PROD}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - deployment: apply
        continueOnError: false
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: PROD-IO-SERVICE-CONN
                    ENVIRONMENT: prod
                    WORKINGDIR: 'src/core'
      - deployment: migrate
        continueOnError: false
        dependsOn: apply
        environment: 'PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzureCLI@2
                  displayName: migrate data on subscription-migrations
                  inputs:
                    azureSubscription: PROD-IO-SERVICE-CONN
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    failOnStandardError: false
                    inlineScript: |
                      set -e
                      cd src/psql/selfcare/subscription-migrations
                      echo "Executing migrations"
                      ./flyway.sh migrate PROD-IO db && echo "Migration successful" || { echo "Migration failed"; exit 1; }

  - stage: apply_PROD_SIGN
    dependsOn: [plan_PROD]
    condition: and(eq(${{parameters.SIGN}}, true), eq(${{parameters.PROD}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - deployment: apply
        continueOnError: false
        environment: 'PROD-SIGN'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                # 3. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    SUBSCRIPTION: PROD-IO-SERVICE-CONN
                    ENVIRONMENT: prod
                    WORKINGDIR: 'src/sign'
