# only manual
trigger: none
pr: none

parameters:
  - name: 'COMMON'
    displayName: 'apply COMMON folder@PROD subscription '
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'APP_BETA'
    displayName: 'apply APP folder@AKS BETA'
    type: boolean
    default: True
    values:
      - False
      - True
  - name: 'APP_PROD01'
    displayName: 'apply APP folder@AKS PROD01'
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 10
  AKS_PLATFORM_BETA_PROD_NAME: '$(TF_AKS_PLATFORM_BETA_PROD_NAME)'
  BETA_AKS_APISERVER_URL: '$(TF_BETA_AKS_APISERVER_URL)'
  BETA_AKS_AZURE_DEVOPS_SA_CACRT: '$(TF_BETA_AKS_AZURE_DEVOPS_SA_CACRT)'
  BETA_AKS_AZURE_DEVOPS_SA_TOKEN: '$(TF_BETA_AKS_AZURE_DEVOPS_SA_TOKEN)'
  AKS_PLATFORM_PROD01_PROD_NAME: '$(TF_AKS_PLATFORM_PROD01_PROD_NAME)'
  PROD01_AKS_APISERVER_URL: '$(TF_PROD01_AKS_APISERVER_URL)'
  PROD01_AKS_AZURE_DEVOPS_SA_CACRT: '$(TF_PROD01_AKS_AZURE_DEVOPS_SA_CACRT)'
  PROD01_AKS_AZURE_DEVOPS_SA_TOKEN: '$(TF_PROD01_AKS_AZURE_DEVOPS_SA_TOKEN)'

pool:
  vmImage: 'ubuntu-20.04'

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.4.0
      endpoint: 'io-azure-devops-github-ro'

stages:
#
# Common
#
  - stage: tf_apply_common_on_prod
    dependsOn: []
    condition: and(succeeded(), eq(${{parameters.COMMON}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - job: tf_apply_common_on_prod
        strategy:
          parallel: 1
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          - checkout: self
          # 1. Install terraform and terragrunt
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan messages-common
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              ENVIRONMENT: "prod"
              WORKINGDIR: 'src/domains/messages-common'
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: 'src/domains/messages-common'

#
# APP
#
  - stage: tf_apply_app_on_aks_beta
    dependsOn: [tf_apply_common_on_prod]
    condition: and(succeeded(), eq(${{parameters.APP_BETA}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - job: tf_apply_app_on_aks_beta
        timeoutInMinutes: $[variables.TIME_OUT]
        strategy:
          parallel: 1
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan messages-app
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              AKS_NAME: ${{ variables.AKS_PLATFORM_BETA_PROD_NAME }}
              AKS_API_SERVER_URL: ${{ variables.BETA_AKS_APISERVER_URL }}
              AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.BETA_AKS_AZURE_DEVOPS_SA_CACRT }}
              AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.BETA_AKS_AZURE_DEVOPS_SA_TOKEN }}
              ENVIRONMENT: "weu-beta"
              WORKINGDIR: 'src/domains/messages-app'
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              AKS_NAME: ${{ variables.AKS_PLATFORM_BETA_PROD_NAME }}
              AKS_API_SERVER_URL: ${{ variables.BETA_AKS_APISERVER_URL }}
              AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.BETA_AKS_AZURE_DEVOPS_SA_CACRT }}
              AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.BETA_AKS_AZURE_DEVOPS_SA_TOKEN }}
              ENVIRONMENT: "weu-beta"
              WORKINGDIR: 'src/domains/messages-app'

  - stage: tf_apply_app_on_aks_on_prod01
    dependsOn: [tf_apply_app_on_aks_beta]
    condition: and(succeeded(), eq(${{parameters.APP_PROD01}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - job: tf_apply_app_on_aks_on_prod01
        timeoutInMinutes: $[variables.TIME_OUT]
        strategy:
          parallel: 1
        steps:
          - checkout: self
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan messages-app
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              AKS_NAME: ${{ variables.AKS_PLATFORM_PROD01_PROD_NAME }}
              AKS_API_SERVER_URL: ${{ variables.PROD01_AKS_APISERVER_URL }}
              AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.PROD01_AKS_AZURE_DEVOPS_SA_CACRT }}
              AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.PROD01_AKS_AZURE_DEVOPS_SA_TOKEN }}
              ENVIRONMENT: "weu-prod01"
              WORKINGDIR: 'src/domains/messages-app'
          # 3. Run terraform apply
          - template: templates/terraform-apply/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              AKS_NAME: ${{ variables.AKS_PLATFORM_PROD01_PROD_NAME }}
              AKS_API_SERVER_URL: ${{ variables.PROD01_AKS_APISERVER_URL }}
              AKS_AZURE_DEVOPS_SA_CA_CRT: ${{ variables.PROD01_AKS_AZURE_DEVOPS_SA_CACRT }}
              AKS_AZURE_DEVOPS_SA_TOKEN: ${{ variables.PROD01_AKS_AZURE_DEVOPS_SA_TOKEN }}
              ENVIRONMENT: "weu-prod01"
              WORKINGDIR: 'src/domains/messages-app'
