# only manual
trigger: none
pr: none

parameters:
  - name: "PROD"
    displayName: "Run on PROD environment"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: "SQL_MIGRATION"
    displayName: "Run on sql migration"
    type: boolean
    default: True
    values:
      - False
      - True

variables:
  TIME_OUT: 10

pool:
  vmImage: "ubuntu-20.04"

resources:
  repositories:
    - repository: terraform
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.4.0
      endpoint: 'io-azure-devops-github-ro'

stages:
  # PROD_CORE
  - stage: plan_PROD_CORE
    dependsOn: []
    condition: eq(${{parameters.PROD}}, true)
    pool:
      name: io-prod-linux
    jobs:
      - job: plan
        timeoutInMinutes: $[variables.TIME_OUT]
        steps:
          # 1. Install terraform
          - template: templates/terraform-setup/template.yaml@terraform
          # 2. Run terraform plan
          - template: templates/terraform-plan/template.yaml@terraform
            parameters:
              AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
              ENVIRONMENT: prod
              WORKINGDIR: "src/core"
          - task: AzureCLI@2
            displayName: validate migration data on subscription-migrations
            inputs:
              azureSubscription: PROD-IO-SERVICE-CONN
              scriptType: "bash"
              scriptLocation: "inlineScript"
              failOnStandardError: false
              inlineScript: |
                set -e
                cd src/psql/selfcare/subscription-migrations
                echo "Validating migrations"
                ./flyway.sh validate PROD-IO db -ignorePendingMigrations=true && echo "Validation successful" || { echo "Validation failed"; exit 1; }
                ./flyway.sh info PROD-IO db && echo "Info successful" || { echo "Info failed"; exit 1; }

  - stage: apply_PROD_CORE
    dependsOn: [plan_PROD_CORE]
    condition: eq(${{parameters.PROD}}, true)
    pool:
      name: io-prod-linux
    jobs:
      - deployment: apply
        continueOnError: false
        environment: "PROD"
        strategy:
          runOnce:
            deploy:
              steps:
                # 1. Install terraform
                - template: templates/terraform-setup/template.yaml@terraform
                # 2. Run terraform apply
                - template: templates/terraform-apply/template.yaml@terraform
                  parameters:
                    AZURE_SERVICE_CONNECTION_NAME: PROD-IO-SERVICE-CONN
                    ENVIRONMENT: prod
                    WORKINGDIR: "src/core"

  - stage: apply_SQL_MIGRATION_PROD_CORE
    dependsOn: [plan_PROD_CORE]
    condition: and(eq(${{parameters.SQL_MIGRATION}}, true), eq(${{parameters.PROD}}, true))
    pool:
      name: io-prod-linux
    jobs:
      - deployment: migrate_sql
        continueOnError: false
        environment: "PROD"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: migrate data on subscription-migrations
                  inputs:
                    azureSubscription: PROD-IO-SERVICE-CONN
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    failOnStandardError: false
                    inlineScript: |
                      set -e
                      cd src/psql/selfcare/subscription-migrations
                      echo "Executing migrations"
                      ./flyway.sh migrate PROD-IO db && echo "Migration successful" || { echo "Migration failed"; exit 1; }
